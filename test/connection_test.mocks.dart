// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_application_2/test/connection_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i2;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i5;
import 'package:flutter_application_2/presentation/bloc/internet/internet_bloc.dart'
    as _i6;
import 'package:flutter_application_2/presentation/bloc/internet/internet_event.dart'
    as _i7;
import 'package:flutter_application_2/presentation/bloc/internet/internet_state.dart'
    as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConnectivity_0 extends _i1.SmartFake implements _i2.Connectivity {
  _FakeConnectivity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternetState_1 extends _i1.SmartFake implements _i3.InternetState {
  _FakeInternetState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i2.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i4.Stream<List<_i5.ConnectivityResult>>.empty(),
          )
          as _i4.Stream<List<_i5.ConnectivityResult>>);

  @override
  _i4.Future<List<_i5.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i4.Future<List<_i5.ConnectivityResult>>.value(
              <_i5.ConnectivityResult>[],
            ),
          )
          as _i4.Future<List<_i5.ConnectivityResult>>);
}

/// A class which mocks [InternetBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetBloc extends _i1.Mock implements _i6.InternetBloc {
  MockInternetBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Connectivity get connectivity =>
      (super.noSuchMethod(
            Invocation.getter(#connectivity),
            returnValue: _FakeConnectivity_0(
              this,
              Invocation.getter(#connectivity),
            ),
          )
          as _i2.Connectivity);

  @override
  _i3.InternetState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeInternetState_1(this, Invocation.getter(#state)),
          )
          as _i3.InternetState);

  @override
  _i4.Stream<_i3.InternetState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i4.Stream<_i3.InternetState>.empty(),
          )
          as _i4.Stream<_i3.InternetState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void add(_i7.InternetEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i7.InternetEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.InternetState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i7.InternetEvent>(
    _i8.EventHandler<E, _i3.InternetState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i8.Transition<_i7.InternetEvent, _i3.InternetState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i8.Change<_i3.InternetState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
